// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Utfpr.Troca.De.Talentos.Infrastructure.Migrations.Postgre;

namespace Utfpr.Troca.De.Talentos.Infrastructure.Migrations.Postgre.Migrations
{
    [DbContext(typeof(PostgreSqlMigrationsDbContext))]
    [Migration("20211207005505_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("UTFPR")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Utfpr.Troca.De.Talentos.Domain.Areas.Area", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cdarea")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("descricao")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_area");

                    b.ToTable("area");
                });

            modelBuilder.Entity("Utfpr.Troca.De.Talentos.Domain.Pessoas.Pessoa", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cdpessoa")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Campus")
                        .IsRequired()
                        .HasColumnName("campus")
                        .HasColumnType("text");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnName("cidade")
                        .HasColumnType("text");

                    b.Property<string>("Curso")
                        .IsRequired()
                        .HasColumnName("curso")
                        .HasColumnType("text");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnName("estado")
                        .HasColumnType("text");

                    b.Property<long>("_usuarioId")
                        .HasColumnName("cdusuario")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_pessoa");

                    b.ToTable("pessoa");
                });

            modelBuilder.Entity("Utfpr.Troca.De.Talentos.Domain.Pessoas.Usuario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cdusuario")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("text");

                    b.Property<string>("Ra")
                        .IsRequired()
                        .HasColumnName("ra")
                        .HasColumnType("text");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnName("senha")
                        .HasColumnType("text");

                    b.Property<long?>("_usuarioId")
                        .HasColumnName("_usuarioid")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_usuario");

                    b.HasIndex("_usuarioId")
                        .IsUnique()
                        .HasName("ix_usuario__usuarioid");

                    b.ToTable("usuario");
                });

            modelBuilder.Entity("Utfpr.Troca.De.Talentos.Domain.Pessoas.UsuarioArea", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cdusuarioarea")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("_secaoId")
                        .HasColumnName("cdsecao")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_atividade");

                    b.ToTable("atividade");
                });

            modelBuilder.Entity("Utfpr.Troca.De.Talentos.Domain.Areas.Area", b =>
                {
                    b.HasOne("Utfpr.Troca.De.Talentos.Domain.Pessoas.UsuarioArea", null)
                        .WithMany("Areas")
                        .HasForeignKey("Id")
                        .HasConstraintName("fk_area_atividade_cdarea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Utfpr.Troca.De.Talentos.Domain.Pessoas.Usuario", b =>
                {
                    b.HasOne("Utfpr.Troca.De.Talentos.Domain.Pessoas.Pessoa", null)
                        .WithOne("Usuario")
                        .HasForeignKey("Utfpr.Troca.De.Talentos.Domain.Pessoas.Usuario", "_usuarioId")
                        .HasConstraintName("fk_usuario_pessoa__usuarioid")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Utfpr.Troca.De.Talentos.Domain.Pessoas.UsuarioArea", b =>
                {
                    b.HasOne("Utfpr.Troca.De.Talentos.Domain.Pessoas.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("Id")
                        .HasConstraintName("fk_atividade_usuario_cdusuarioarea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
